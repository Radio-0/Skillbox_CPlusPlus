/*Задание 3. Реализация программы таймера
Реализуйте работу точного таймера с визуальной отдачей.
В начале программы пользователь вводит количество минут и секунд, которые требуется засечь на таймере, и нажимает «Ввод».
После этого начинается обратный отсчёт времени, о чём незамедлительно и последовательно сообщается пользователю. Формат вывода такой же, как и при вводе интервала: минуты и секунды.
Как только отсчёт на таймере иссяк, программа сообщает об этом с помощью вывода в консоль специального сообщения. Сообщение вместо аудиосигнала может выглядеть так: DING! DING! DING!
Советы и рекомендации
Для ввода значения для засекания времени используйте std::get_time, но в качестве формата запросите только минуты и секунды. Целевое время для остановки таймера вычислите сами с помощью манипуляции над текущим std::time. Количество оставшегося времени выводите в цикле и вычислите его самостоятельно с помощью обращения с типом std::time_t как с секундами.*/

#include <iostream>
#include <unistd.h>
#include <ctime>
#include <iomanip>

int main() {
  double timer_sec;
  std::tm timer;
  std::cout << "Enter minutes:seconds: ";
	std::cin >> std::get_time(&timer, "%M:%S");
  timer_sec = timer.tm_sec + timer.tm_min * 60;
  std::time_t start = std::time(nullptr);
  std::time_t the_end;
  
  while ((start + (std::time_t)(timer_sec - 1)) != the_end){
    the_end = std::time(nullptr);
    std::cout << std::put_time(&timer, "%M:%S") << "\n";
    timer.tm_sec--;
    if(timer.tm_sec < 00 && timer.tm_min > 0){
      timer.tm_min--;
      timer.tm_sec = 59;
    }    
    sleep(1);
  }
  std::cout << std::put_time(&timer, "%M:%S") << "\n";
  std::cout << "DING! DING! DING!\n";
  return 0;
}
